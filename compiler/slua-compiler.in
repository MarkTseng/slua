#!/usr/bin/env bash
#

CC=gcc
LIBTOOL="libtool --tag=CC --silent"
RPATH=`pwd`
SLUAC="./sluac"
PREFIX="@CMAKE_INSTALL_PREFIX@"
COMMON_LDFLAGS="@COMMON_LDFLAGS@"

# find sluac
if [[ ! -x "$SLUAC" ]]; then
	SLUAC=`which sluac`
fi

#CPU=i686
#CPU=pentium4
CPU=athlon64
FORCE_CPU="0"
FILE=
FILES=""
OUTPUT_FILE=""
DEBUG="0"
KEEP_TMPS="0"
STATIC="0"
MODE="standalone"
EXTRA_ARGS=
LIBS=

function version() {
	$SLUAC -version
	exit 0;
}

function usage() {
	echo "USAGE: $0 [options] <script>

OPTIONS:
  -c++             - Compile as C++ code instead of C code.  Requires that the core was
	                     also compiled as C++ code.
  -M               - Compile Lua script into a loadable module instead of a standalone
                       executable.
  -debug           - Turns off all optimizations and turns on debug info.  Both Lua debug
                       info and gcc debug symbols are enabled.
  -keep-tmps       - Don't delete temp. files generated by intermediate stages.  Use only
                       for debuging generated code or if you are really curious!
  -mcpu=<arch>     - <cpu> is passed to gcc as '-march=<cpu>'
  -******          - All other options passed to 'sluac'.  See below for a list of
                       options supported by 'sluac'.

sluac '-help' output:
"
	$SLUAC -help
	exit 0;
}

# parse command line parameters.
CONSUME=""
for arg in "$@" ; do
	case "$CONSUME" in
	-o)  OUTPUT_FILE=` echo "$arg" | sed -e 's/-o=//'` ;;
	-L)  EXTRA_ARGS="$EXTRA_ARGS -L $arg" ;;
	esac
	if [[ ! -z "$CONSUME" ]]; then
		CONSUME=""
		continue
	fi
	case "$arg" in
	-M)  MODE="lua_mod"; EXTRA_ARGS="$EXTRA_ARGS $arg" ;;
	-static)  STATIC="1" ;;
	-c++)  CC=g++ ;;
	-debug)  DEBUG="1" ;;
	-keep-tmps)  KEEP_TMPS="1" ;;
	-mode=*)  MODE=` echo "$arg" | sed -e 's/-mode=//'` ;;
	-mcpu=*)  FORCE_CPU="1"; CPU=` echo "$arg" | sed -e 's/-mcpu=//'` ;;
	-help|--help|-h)  usage ;;
	-version|--version|-v)  version ;;
	-o|-L)  CONSUME="$arg" ;;
	-L*)  EXTRA_ARGS="$EXTRA_ARGS $arg" ;;
	-*)  EXTRA_ARGS="$EXTRA_ARGS $arg" ;;
	*) FILE=${arg/.lua/}; FILES="$FILES $arg" ;;
	esac
done

# find the mode's output file extension.
OUTPUT_EXT=""
case "$MODE" in
	c) OUTPUT_EXT=".c" ;;
	lua_mod) OUTPUT_EXT=".so" ;;
esac
if [[ -z "$OUTPUT_FILE" ]]; then
	OUTPUT_FILE="${FILE}${OUTPUT_EXT}"
else
	FILE=${OUTPUT_FILE}
fi

# get source file's path & filename.
FPATH=`dirname ${FILE}`
FNAME=`basename ${FILE}`

# select debug/optimize parameters.
if [[ $DEBUG == "1" ]]; then
	CFLAGS=" -O0 -ggdb "
	#LUA_FLAGS=" -O0 -g "
	#LUA_FLAGS=" -O3 -do-not-inline-opcodes "
	#CFLAGS=" -ggdb -O3 -fomit-frame-pointer -pipe -Wall "
	if [[ ! -z $CPU && $FORCE_CPU == "1" ]]; then
		CFLAGS=" -march=$CPU $CFLAGS "
	fi
else
	#LUA_FLAGS=" -O3 -s "
	#LUA_FLAGS=" -O3 -g "
	#CFLAGS=" -ggdb -O3 -fomit-frame-pointer -pipe -Wall "
	CFLAGS=" -O3 -fomit-frame-pointer -pipe "
	if [[ ! -z $CPU ]]; then
		CFLAGS=" -march=$CPU $CFLAGS "
	fi
fi
CFLAGS="${CFLAGS} -I$PREFIX/include/slua"

if [[ $MODE == "standalone" ]]; then
	# path to liblua_main.a
	LIBS="$LIBS -L. -L$PREFIX/lib "
fi

#
# run sluac to compile Lua source/bytecode to C code
#
echo "$SLUAC $EXTRA_ARGS $LUA_FLAGS -c -o ${FILE}.c ${FILES}"
$SLUAC $EXTRA_ARGS $LUA_FLAGS -c -o ${FILE}.c ${FILES} || {
	echo "sluac: failed to compile Lua code into C code."
	exit 1;
}
TMPS="${FILE}.c"

# use one of the compile modes.
case "$MODE" in
	c)
		KEEP_TMPS=1
		;;
	standalone)
		echo "$CC $CFLAGS $LIBS -o ${OUTPUT_FILE} ${FILE}.c -llua_main ${COMMON_LDFLAGS}"
		$CC $CFLAGS $LIBS -o ${OUTPUT_FILE} ${FILE}.c -llua_main ${COMMON_LDFLAGS}
		;;
	lua_mod)
		TMPS="$TMPS ${FPATH}/${FNAME}.lo ${FPATH}/lib${FNAME}.la"
		# compile C code to lua module.
		$LIBTOOL --mode=compile $CC $CFLAGS -c -o ${FILE}.lo ${FILE}.c
		# compile to dynamic module
		if [[ $STATIC == "0" ]]; then
			$LIBTOOL --mode=link $CC -rpath ${RPATH} -o ${FPATH}/lib${FNAME}.la ${FILE}.lo && \
			cp -p ${FPATH}/.libs/lib${FNAME}.so ${RPATH}/${OUTPUT_FILE}
			if [[ $KEEP_TMPS == "0" ]]; then
				$LIBTOOL --mode=clean rm -f $TMPS
			fi
		fi
		;;
	*)
		echo "Invalid compile mode: $MODE"
		;;
esac

if [[ $KEEP_TMPS == "0" ]]; then
	rm -f $TMPS
fi

